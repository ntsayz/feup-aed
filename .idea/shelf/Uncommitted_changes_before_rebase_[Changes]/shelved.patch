Index: src/Manager.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by ntsayz on 10/8/22.\n//\n\n\n#include <functional>\n#include \"Manager.h\"\n\nManager::Manager() {\n    globalSession = true;\n    loadDatafromFiles();\n}\n\nvoid Manager::startApplication(){\n    while(globalSession) {\n        Utility::clear_screen();\n        short choice = Menu::Main();\n        switch (choice) {\n            case 1:\n                Listings();\n                break;\n            case 2:\n                thisFunctionIsForTestingPurposes();\n                break;\n            case 3:\n                break;\n            case 9:\n                globalSession = false;\n                break;\n            default:\n                std::cerr << \"That doesn't seem like a valid option..\\n\";\n                break;\n        }\n    }\n\n}\n\nvoid Manager::Listings() {\n    bool localSession = true;\n    while(localSession){\n        Utility::clear_screen();\n        short choice = Menu::Listings();\n        switch (choice){\n            case 1:\n                studentsListings();\n                break;\n            case 2:\n                classesListings();\n                break;\n            case 3:\n                UCListings();\n                break;\n            case 4:\n                schedulesListings();\n                break;\n            case 0:\n                localSession = false;\n                break;\n            default:\n                break;\n        }\n\n    }\n\n}\n\nvoid Manager::studentsListings() {\n    bool localSession = true;\n    while(localSession){\n        short choice = Menu::studentsListings();\n        switch (choice) {\n            case 1:{\n                bool s = true;\n                while(s){\n                    s = Menu::studentsListings_Class(students_uc_classes, s);\n                }\n                break;\n            }\n            case 2:\n                Menu::studentsListings_Year(students_uc_classes);\n                break;\n            case 3:\n                Menu::studentsListings_UC(students_uc_classes,uc_classes);\n                break;\n            case 0:\n                localSession = false;\n                break;\n            default:\n                break;\n        }\n    }\n}\n//TODO: MENUS HERE\nvoid Manager::classesListings() {\n    Menu::classesListings();\n    std::vector<std::string> l1;\n    std::vector<std::string> l2;\n    std::vector<std::string> l3;\n    for(const auto& aClass: classes){\n        if(aClass.getClassYear() ==1){\n            l1.push_back(aClass.getClassCode());\n        }else if(aClass.getClassYear() ==2){\n            l2.push_back(aClass.getClassCode());\n        }else if(aClass.getClassYear() ==3){\n            l3.push_back(aClass.getClassCode());\n        }\n    }\n    for(int i = 0; i <  l3.size(); i++){\n        std::cout << \"|\"<<std::setfill(' ')<<  std::setw(13) << l1[i] << std::setw(7) << \"|\"\n                  << std::setw(13)<< l2[i];\n        std::cout << std::setw(7) << \"|\" << std::setw(12) << l3[i] << std::setw(7) <<\"|\\n\";\n    }\n    Utility::footer();\n    int i;\n    std::cin  >> i;\n    l1.clear();\n    l2.clear();\n    l3.clear();\n}\n\nvoid Manager::UCListings() {\n    bool localSession = true;\n    std::vector<std::string> l1;\n    std::vector<std::string> l2;\n    std::vector<std::string> l3;\n    while(localSession){\n        Utility::header(\"Curricular Units\");\n        std::cout << \"|\" << std::setfill('-') <<std::setw(177) << \"|\\n\";\n\n        // all classes in each curricular unit\n        for(auto& [uc,v] : uc_classes){\n            std::cout  << \"|\"<< uc.get_uc_Code() << \"| ==> \";\n            for( const auto& aclass : v){\n                std::cout <<  \" | \" << aclass.getClassCode() << \"\";\n            }\n            std::cout << \" |\\n\";\n            std::cout << \"|\" << std::setfill('-') <<std::setw(177) << \"|\\n\";\n        }\n\n        Utility::footer();\n        int i;\n        std::cin >> i;\n        if(i == 0)localSession = false;\n        l1.clear();\n        l2.clear();\n        l3.clear();\n    }\n\n}\n\nvoid Manager::schedulesListings() {\n    bool localSession = true;\n    while(localSession){\n\n        Utility::clear_screen();\n        Utility::header(\"SCHEDULES\");\n        Utility::body(\"Choose a schedule from a particular:\",{\"1. Student\",\"2. Class\",\"3. Curricular Unit\"});\n        Utility::footer();\n        int choice;\n        std::cin >> choice;\n        choice = Utility::getInput(choice,0,3);\n        if(choice==0){localSession = false; continue;}\n        Menu::schedulesListings(schedules,classes,classes_uc,students_uc_classes,choice);\n    }\n}\n\nvoid Manager::getYearClass(int& year, int& classnum){\n    bool localsession = true;\n    while(localsession){\n        Utility::clear_screen();\n        std::cout << std::setfill(' ') << std::setw(36) << \"From what year?\\n\\n\";\n        std::cout <<  std::setw(35) << \"1. 1st Year\\n\"\n                  << std::setw(35) << \"2. 2nd Year\\n\"\n                  << std::setw(35) << \"3. 3rd Year\\n\";\n        Utility::footer();\n        std::cout << \"-->\" << std::flush;\n        std::cin >> year;\n        year = Utility::getInput(year, (short)0, (short )3);\n\n        if(year >= 1 && year <= 3){\n            while(localsession){\n                Utility::clear_screen();\n                std::cout <<  std::setw(30) << \"From what class?\\n\" << std::setfill(' ') << std::setw(60) << \"0 to Exit\\n\";\n                int i =1;\n                for(Class turma: classes){\n                    if(turma.getClassYear() == year){\n                        std::cout << i << \". \"<<turma.getClassCode() << \"\\n\";\n                        i++;\n                    }\n                }\n                i--;\n                Utility::footer();\n                //i= 0;\n                std::cout << \"-->\" << std::flush;\n                std::cin >> classnum;\n                classnum = Utility::getInput((short)classnum, (short)0, i);\n                if(classnum ==0) localsession = false;\n                if(classnum >=1 && classnum <= i && year != 0) localsession = false;\n                Utility::clear_screen();\n            }\n        }else if(year == 0) localsession = false;\n    }\n}\n\nvoid Manager::loadDatafromFiles()\n{\n    //file: students_classes.csv\n    std::vector<std::string> vec;\n    const char *fname = Utility::getStudentClassesPath();\n    FILE *file = fopen(fname, \"r\");\n    if(!file)\n    {\n        std::cerr << (\"Could not open the file\\n\");\n    }\n    char content[1024];\n    int c = 0 ;\n    int c1 = 0;\n    while(fgets(content, 1024, file))\n    {\n        c++;\n        char *v = strtok(content, \",\");\n\n        while(v)\n        {\n            c1++;\n            std::string s = v;\n            if(c>1 && s.size() >1){\n                vec.push_back((std::string)s);\n            }\n            v = strtok(nullptr, \",\");\n        }\n\n        if(c>1){\n            int code;\n            Uc uc(vec[2]);\n            Class aClass(vec[3]);\n            std::stringstream sss;\n            sss << vec[0];\n            sss >> code;\n            Student student(code,vec[1],uc,aClass);\n            classes.insert(aClass);\n            curricularUnits.insert(uc);\n            students.insert(student);\n\n            if(students_uc_classes.find(student) == students_uc_classes.end()){\n                std::map<Uc, std::vector<Class>> ucClassMap;\n                std::vector<Class> classList;\n                classList.push_back(aClass);\n                ucClassMap[uc] = classList;\n                students_uc_classes[student] = ucClassMap ;\n                std::vector<Uc> l;\n                l.push_back(uc);\n                classes_uc[aClass] = l;\n            }else{\n                students_uc_classes[student][uc].push_back(aClass);\n                classes_uc[aClass].push_back(uc);\n            }\n            if(uc_classes.find(uc) == uc_classes.end()){\n                std::vector<Class> classList;\n                classList.push_back(aClass);\n                uc_classes[uc] = classList;\n            }else{\n                uc_classes[uc].push_back(aClass);\n            }\n\n        }\n        vec.clear();\n    }\n    fclose(file);\n\n    vec.clear();\n\n    //file: classes_per_uc.csv (The other file didn't have all the information needed)\n    const char *fname1 = Utility::getClassesUcPath();\n    FILE *file1 = fopen(fname1, \"r\");\n    c = 0;\n    if(!file1)\n    {\n        std::cerr << (\"Could not open the file\\n\");\n    }\n    char content1[1024];\n    while(fgets(content1, 1024, file1))\n    {\n        c++;\n        char *v = strtok(content1, \",\");\n        while(v)\n        {\n            std::string s = v;\n            if(c>1 && s.size() >1){\n                vec.push_back((std::string)s);\n            }\n            v = strtok(nullptr, \",\");\n        }\n\n        if(c>1) {\n            Uc uc(vec[0]);\n            Class aClass(vec[1]);\n            classes.insert(aClass);\n            curricularUnits.insert(uc);\n            if(uc_classes.find(uc) == uc_classes.end()){\n                std::vector<Class> classList;\n                classList.push_back(aClass);\n                uc_classes[uc] = classList;\n            }else{\n                uc_classes[uc].push_back(aClass);\n            }\n        }\n        vec.clear();\n    }\n    fclose(file1);\n    vec.clear();\n\n    // file : classes.csv - loads schedules datastructure\n    const char *fname2 = Utility::getClassesPath();\n    FILE *file2 = fopen(fname2, \"r\");\n    //Line counter\n    c = 0;\n    if(!file1)\n    {\n        std::cerr << (\"Could not open the file\\n\");\n    }\n    char content2[1024];\n    while(fgets(content2, 1024, file2))\n    {\n        c++;\n        char *v = strtok(content2, \",\");\n        while(v)\n        {\n            std::string s = v;\n            if(c>1){\n                vec.push_back((std::string)s);\n\n            }\n            v = strtok(nullptr, \",\");\n        }\n\n        if(c>1) {\n            float starthour = 0 , duration = 0;\n            //std::cout  << vec[2] << \",\" << vec[3] << \",\" << vec[4] << \",\" << vec[5] << \"\\n\";\n            std::stringstream sss;\n            sss << vec[4];\n            sss >> duration;\n\n            std::stringstream ss;\n            ss << vec[3];\n            ss >> starthour;\n\n            Slot slot(vec[2],starthour,duration,vec[5]);\n            Uc uc(vec[1]);\n            Class aClass(vec[0]);\n\n            if(schedules.find(uc) == schedules.end()){\n                std::map<Class, std::vector<Slot>> classSlotMap;\n                std::vector<Slot> SlotList;\n                SlotList.push_back(slot);\n                classSlotMap[aClass] = SlotList;\n                schedules[uc] = classSlotMap ;\n            }else{\n                schedules[uc][aClass].push_back(slot);\n            }\n\n        }\n        vec.clear();\n    }\n    fclose(file1);\n\n    for(auto& [uc,v] : uc_classes){\n        std::set<Class> s( v.begin(), v.end() );\n        v.assign( s.begin(), s.end() );\n    }\n\n    for(auto& [aclass,v] : classes_uc){\n        std::set<Uc> s( v.begin(), v.end() );\n        v.assign( s.begin(), s.end() );\n    }\n}\n\n\nvoid Manager::thisFunctionIsForTestingPurposes(){\n    for(auto stud: students){\n        for(auto& [k,v] : students_uc_classes[stud] ) {\n            for(auto& el: v){\n                stud.addClassUC(const_cast<Uc &>(k), el);\n                stud.showEnrolledClasses();\n            }\n        }\n    }\n    for(auto& i : students){\n        i.showEnrolledClasses();\n    }\n    /*int i;\n    std::cout << \"\\nClasses\\n\";\n    for(Class aClass : classes){\n        //std::cout << aClass.getClassSize() << \"\\n\";\n        //aClass.showStudents();\n        //std::cout << \"\\n\";\n    }\n    std::cout << \"\\nUC\\n\\n\";\n    for(Uc uc: curricularUnits){\n        //std::cout << uc.get_uc_Code()<< \"\\n\";\n    }\n    std::cout << \"\\nStudents\\n\\n\";\n    for(Student student: students){\n        //student.showEnrolledClasses();\n        //std::cout << \"\\n\";\n    }*/\n    //for (auto it = ucclasses.begin();it != ucclasses.end();++it) std::cout << \"  [\" << (*it).first.getCode() << \", \" << (*it).second.getClassCode() << \"]\";\n\n    /*std::cout << \"here\";\n    for(auto it: students_uc_classes){\n        std::cout  << \"(\"<< it.first.getCode() << \") ==> [\";\n        for(auto [uc,classList]: it.second){\n            for(auto aClass : classList){\n                std::cout <<  \"[\"<< uc.get_uc_Code() << \", \" << aClass.getClassCode() << \"],\";\n            }\n        }\n        std::cout << \"]\\n\";\n    }*/\n    /* UC CLASSES\n    /for(auto& [uc,v] : uc_classes){\n        std::cout  << \"(\"<< uc.get_uc_Code() << \") ==> [\";\n        for( const auto& aclass : v){\n            std::cout <<  \"[\" << aclass.getClassCode() << \"],\";\n        }\n        std::cout << \"\\n\";\n    }*/\n    for(auto& [aclass,v] : classes_uc){\n        std::cout  << \"(\"<< aclass.getClassCode() << \") ==> [\";\n        for( const auto& uc : v){\n            std::cout <<  \"[\" << uc.get_uc_Code() << \"],\";\n        }\n        std::cout << \"\\n\";\n    }\n    //std::cout << \"]\\n\";\n\n    std::cout << students_uc_classes.size();\n    // schedules\n    /*for(auto [uc, classMap] : schedules){\n        std::cout << std::setfill(' ') << std::setw(20)  << \"<== (\"<< uc.get_uc_Code() << \") ==>\\n\\n[\";\n        for(auto [aclass,vec]: classMap){\n            for(auto slot: vec){\n                std::cout << \"(\" << aclass.getClassCode() << \") - [\" << slot.getWeekday() << \",\" << slot.getStartHour()  << \"-\" << slot.getEndHour() <<  \",\" << slot.getSlotType() << \"],\";\n            }\n            std::cout << \"\\n\";\n        }\n        std::cout << \"]\\n\";\n    }*/\n\n    int i;\n    std::cin >> i;\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Manager.cpp b/src/Manager.cpp
--- a/src/Manager.cpp	(revision a8f1f6dc4e6117acc45b19782583837b09d3074e)
+++ b/src/Manager.cpp	(date 1667702119225)
@@ -375,7 +375,6 @@
     }
 }
 
-
 void Manager::thisFunctionIsForTestingPurposes(){
     for(auto stud: students){
         for(auto& [k,v] : students_uc_classes[stud] ) {
